!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?module.exports=factory():"function"==typeof define&&define.amd?define("bulmaCalendar",factory):global.bulmaCalendar=factory()}(this,(function(){"use strict";var datepicker_langs={en:{weekStart:1,previousMonth:"Previous Month",nextMonth:"Next Month",months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],weekdays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],weekdaysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]},ru:{weekStart:1,previousMonth:"Предыдущий месяц",nextMonth:"Следующий месяц",months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthsShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],weekdays:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],weekdaysShort:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"]},fr:{weekStart:1,previousMonth:"Mois précédent",nextMonth:"Mois suivant",months:["Janvier","Février","Mars","Avril","Mai","Juin","Juillet","Août","Septembre","Octobre","Novembre","Décembre"],monthsShort:["Jan","Fév","Mar","Avr","Mai","Juin","Juil","Auo","Sep","Oct","Nov","Déc"],weekdays:["Dimanche","Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi"],weekdaysShort:["Dim","Lun","Mar","Mer","Jeu","Ven","Sam"]},de:{weekStart:1,previousMonth:"Vorheriger Monat",nextMonth:"Nächster Monat",months:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthsShort:["Jan","Febr","März","Apr","Mai","Juni","Juli","Aug","Sept","Okt","Nov","Dez"],weekdays:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],weekdaysShort:["So","Mo","Di","Mi","Do","Fr","Sa"]},tr:{weekStart:1,previousMonth:"Önceki Ay",nextMonth:"Gelecek Ay",months:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],monthsShort:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],weekdays:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],weekdaysShort:["Paz","Pzt","Sal","Çar","Per","Cum","Cmt"]},it:{weekStart:1,previousMonth:"Mese Precedente",nextMonth:"Prossimo Mese",months:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],monthsShort:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],weekdays:["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"],weekdaysShort:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"]},th:{weekStart:1,previousMonth:"เดือนก่อนหน้า",nextMonth:"เดือนถัดไป",months:["มกราคม","กุมภาพันธ์","มีนาคม","เมษายน","พฤษภาคม","มิถุนายน","กรกฎาคม","สิงหาคม","กันยายน","ตุลาคม","พฤศจิกายน","ธันวาคม"],monthsShort:["ม.ค.","ก.พ.","มี.ค.","เม.ย.","พ.ค.","มิ.ย.","ก.ค.","ส.ค.","ก.ย.","ต.ค.","พ.ย.","ธ.ค."],weekdays:["อาทิตย์","จันทร์","อังคาร","พุธ","พฤหัสบดี","ศุกร์","เสาร์"],weekdaysShort:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."]},hr:{weekStart:2,previousMonth:"Prošli mjesec",nextMonth:"Slijedeći mjesec",months:["siječanj","veljača","ožujak","travanj","svibanj","lipanj","srpanj","kolovoz","rujan","listopad","studeni","prosinac"],monthsShort:["sij","velj","ožu","tra","svi","lip","srp","kol","ruj","lis","stu","pro"],weekdays:["nedjelja","ponedjeljak","utorak","srijeda","četvrtak","petak","subota"],weekdaysShort:["ned","pon","uto","sri","čet","pet","sub"]},sr:{weekStart:2,previousMonth:"Prošli mesec",nextMonth:"Sledeći mesec",months:["januar","februar","mart","april","maj","jun","jul","avgust","septembar","oktobar","novembar","decembar"],monthsShort:["jan","feb","mar","apr","maj","jun","jul","avg","sep","okt","nov","dec"],weekdays:["nedelja","ponedeljak","utorak","sreda","četvrtak","petak","subota"],weekdaysShort:["ned","pon","uto","sre","čet","pet","sub"]},"zh-cn":{weekStart:1,previousMonth:"上个月",nextMonth:"下个月",months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthsShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],weekdays:["星期天","星期一","星期二","星期三","星期四","星期五","星期六"],weekdaysShort:["周日","周一","周二","周三","周四","周五","周六"]},es:{weekStart:1,previousMonth:"Mes anterior",nextMonth:"Próximo mes",months:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],monthsShort:["Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic"],weekdays:["Domingo","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado"],weekdaysShort:["Dom","Lun","Mar","Mie","Jue","Vie","Sab"]},no:{weekStart:1,previousMonth:"Forrige måned",nextMonth:"Neste måned",months:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],monthsShort:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],weekdays:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],weekdaysShort:["søn","man","tir","ons","tor","fre","lør"]},se:{weekStart:1,previousMonth:"Förra månaden",nextMonth:"Nästa månad",months:["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],monthsShort:["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],weekdays:["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],weekdaysShort:["sön","mån","tis","ons","tor","fre","lör"]},dk:{weekStart:1,previousMonth:"Foregående måned",nextMonth:"Næste måned",months:["januar","februar","marts","april","maj","juni","juli","august","september","oktober","november","december"],monthsShort:["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],weekdays:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],weekdaysShort:["søn","man","tir","ons","tor","fre","lør"]}};class datePicker{constructor(selector,options={}){if(this._clickEvent="ontouchstart"in window?"touchstart":"click",this.element="string"==typeof selector?document.querySelector(selector):selector,!this.element)throw new Error("An invalid selector or non-DOM node has been provided.");this.options=Object.assign({},{startDate:new Date,minDate:null,maxDate:null,dateFormat:"yyyy-mm-dd",lang:"en",overlay:!1,closeOnOverlayClick:!0,closeOnSelect:!0,onSelect:null,onOpen:null,onClose:null,onRender:null,align:"left"},options),this._init()}_init(){return this._id="datePicker"+(new Date).getTime()+Math.floor(Math.random()*Math.floor(9999)),this.lang=void 0!==datepicker_langs[this.lang]?this.lang:"en",this.element.value&&(this.options.startDate=this._parseDate(this.element.value)),this.options.startDate=this._parseDate(this._getFormatedDate(this.options.startDate,this.options.dateFormat)),this.options.minDate&&(this.options.minDate=this._parseDate(this._getFormatedDate(this.options.minDate,this.options.dateFormat))),this.options.maxDate&&(this.options.maxDate=this._parseDate(this._getFormatedDate(this.options.maxDate,this.options.dateFormat))),this.month=this.options.startDate.getMonth(),this.year=this.options.startDate.getFullYear(),this.day=this.options.startDate.getDate(),this.open=!1,this._build(),this._bindEvents(),this}_build(){const datePicker=`\n      <div id='${this._id}' class="datepicker ${this.options.overlay?"modal":""}">\n        ${this.options.overlay?'<div class="modal-background"></div>':""}\n        <div class="calendar">\n          <div class="calendar-nav">\n            <div class="calendar-nav-month">\n              <button class="calendar-nav-previous-month button is-small is-text">\n                <svg viewBox="0 0 50 80" xml:space="preserve">\n                  <polyline fill="none" stroke-width=".5em" stroke-linecap="round" stroke-linejoin="round" points="45.63,75.8 0.375,38.087 45.63,0.375 "/>\n                </svg>\n              </button>\n              <div class="calendar-month">${datepicker_langs[this.options.lang].months[this.month]}</div>\n              <button class="calendar-nav-next-month button is-small is-text">\n                <svg viewBox="0 0 50 80" xml:space="preserve">\n                  <polyline fill="none" stroke-width=".5em" stroke-linecap="round" stroke-linejoin="round" points="0.375,0.375 45.63,38.087 0.375,75.8 "/>\n              </button>\n            </div>\n            <div class="calendar-nav-day">\n              <div class="calendar-day">${this.day}</div>\n            </div>\n            <div class="calendar-nav-year">\n              <button class="calendar-nav-previous-year button is-small is-text">\n                <svg viewBox="0 0 50 80" xml:space="preserve">\n                  <polyline fill="none" stroke-width=".5em" stroke-linecap="round" stroke-linejoin="round" points="45.63,75.8 0.375,38.087 45.63,0.375 "/>\n                </svg>\n              </button>\n              <div class="calendar-year">${this.year}</div>\n              <button class="calendar-nav-next-year button is-small is-text">\n                <svg viewBox="0 0 50 80" xml:space="preserve">\n                  <polyline fill="none" stroke-width=".5em" stroke-linecap="round" stroke-linejoin="round" points="0.375,0.375 45.63,38.087 0.375,75.8 "/>\n              </button>\n            </div>\n          </div>\n          <div class="calendar-container">\n            <div class="calendar-header">\n              <div class="calendar-date">${this._getDayName(0,!0)}</div>\n              <div class="calendar-date">${this._getDayName(1,!0)}</div>\n              <div class="calendar-date">${this._getDayName(2,!0)}</div>\n              <div class="calendar-date">${this._getDayName(3,!0)}</div>\n              <div class="calendar-date">${this._getDayName(4,!0)}</div>\n              <div class="calendar-date">${this._getDayName(5,!0)}</div>\n              <div class="calendar-date">${this._getDayName(6,!0)}</div>\n            </div>\n            <div class="calendar-body"></div>\n          </div>\n        </div>\n      </div>\n    `;document.body.insertAdjacentHTML("beforeend",datePicker),this.datePickerContainer=document.getElementById(this._id),this.datePickerCalendar=this.datePickerContainer.querySelector(".calendar"),this.options.overlay&&(this.datePickerOverlay=this.datePickerContainer.querySelector(".modal-background"),this.datePickerCloseButton=this.datePickerContainer.querySelector(".modal-close")),this.datePickerCalendarNav=this.datePickerCalendar.querySelector(".calendar-nav"),this.datePickerCalendarNavMonth=this.datePickerCalendar.querySelector(".calendar-month"),this.datePickerCalendarNavYear=this.datePickerCalendar.querySelector(".calendar-year"),this.datePickerCalendarNavDay=this.datePickerCalendar.querySelector(".calendar-day"),this.datePickerCalendarNavPreviousMonth=this.datePickerCalendarNav.querySelector(".calendar-nav-previous-month"),this.datePickerCalendarNavNextMonth=this.datePickerCalendarNav.querySelector(".calendar-nav-next-month"),this.datePickerCalendarNavPreviousYear=this.datePickerCalendarNav.querySelector(".calendar-nav-previous-year"),this.datePickerCalendarNavNextYear=this.datePickerCalendarNav.querySelector(".calendar-nav-next-year"),this.datePickerCalendarHeader=this.datePickerCalendar.querySelector(".calendar-header"),this.datePickerCalendarBody=this.datePickerCalendar.querySelector(".calendar-body")}_bindEvents(){this.element.addEventListener(this._clickEvent,e=>{e.preventDefault(),this.open?this.hide():this.show()}),this.options.overlay&&(this.datePickerCloseButton&&this.datePickerCloseButton.addEventListener(this._clickEvent,e=>{e.preventDefault(),this.hide()}),this.options.closeOnOverlayClick&&this.datePickerOverlay.addEventListener(this._clickEvent,e=>{e.preventDefault(),this.hide()})),this.datePickerCalendarNavPreviousYear.addEventListener(this._clickEvent,e=>{e.preventDefault(),this.prevYear()}),this.datePickerCalendarNavNextYear.addEventListener(this._clickEvent,e=>{e.preventDefault(),this.nextYear()}),this.datePickerCalendarNavPreviousMonth.addEventListener(this._clickEvent,e=>{e.preventDefault(),this.prevMonth()}),this.datePickerCalendarNavNextMonth.addEventListener(this._clickEvent,e=>{e.preventDefault(),this.nextMonth()})}_bindDaysEvents(){[].forEach.call(this.datePickerCalendarDays,calendarDay=>{calendarDay.addEventListener(this._clickEvent,e=>{if(e.preventDefault(),!e.currentTarget.classList.contains("is-disabled")){let date=e.currentTarget.dataset.date.split("-"),[year,month,day]=date;void 0!==this.options.onSelect&&null!=this.options.onSelect&&this.options.onSelect&&this.options.onSelect(new Date(year,month,day)),this.element.value=this._getFormatedDate(new Date(year,month,day),this.options.dateFormat),this.options.closeOnSelect&&this.hide()}})})}_getDayName(day,abbr=!1){for(day+=datepicker_langs[this.options.lang].weekStart;day>=7;)day-=7;return abbr?datepicker_langs[this.options.lang].weekdaysShort[day]:datepicker_langs[this.options.lang].weekdays[day]}_renderDay(day,month,year,isSelected,isToday,isDisabled,isEmpty,isBetween,isSelectedIn,isSelectedOut){return`\n      <div data-date="${`${year}-${month}-${day}`}" class="calendar-date${isDisabled?" is-disabled":""}${isBetween?" calendar-range":""}${isSelectedIn?" calendar-range-start":""}${isSelectedOut?" calendar-range-end":""}">\n        <button class="date-item${isToday?" is-today":""}${isSelected?" is-active":""}">${day}</button>\n      </div>\n    `}_renderDays(){const now=new Date;let days="",numberOfDays=this._getDaysInMonth(this.year,this.month),before=new Date(this.year,this.month,1).getDay();void 0!==this.options.onRender&&null!=this.options.onRender&&this.options.onRender&&this.options.onRender(this),datepicker_langs[this.options.lang].weekStart>0&&(before-=datepicker_langs[this.options.lang].weekStart,before<0&&(before+=7));let cells=numberOfDays+before,after=cells;for(;after>7;)after-=7;cells+=7-after;for(var i=0;i<cells;i++){var day=new Date(this.year,this.month,i-before+1),isBetween=!1,isSelected=this._compareDates(day,this.options.startDate),isSelectedIn=!1,isSelectedOut=!1,isToday=this._compareDates(day,now),isEmpty=i<before||i>=numberOfDays+before,isDisabled=!1;day.setHours(0,0,0,0),isSelected||(isSelectedIn=!1,isSelectedOut=!1),(day.getMonth()!==this.month||this.options.minDate&&(day.getTime()<this.options.minDate.getTime()||day.getTime()>this.options.maxDate.getTime()))&&(isDisabled=!0),days+=this._renderDay(day.getDate(),this.month,this.year,isSelected,isToday,isDisabled,isEmpty,!1,isSelectedIn,isSelectedOut)}this.datePickerCalendarBody.insertAdjacentHTML("beforeend",days),this.datePickerCalendarDays=this.datePickerCalendarBody.querySelectorAll(".calendar-date"),this._bindDaysEvents()}prevMonth(){this.month-=1,this._refreshCalendar()}_disablePrevMonth(){this.datePickerCalendarNavPreviousMonth.setAttribute("disabled","disabled")}_enablePrevMonth(){this.datePickerCalendarNavPreviousMonth.removeAttribute("disabled")}nextMonth(){this.month+=1,this._refreshCalendar()}_disableNextMonth(){this.datePickerCalendarNavNextMonth.setAttribute("disabled","disabled")}_enableNextMonth(){this.datePickerCalendarNavNextMonth.removeAttribute("disabled")}prevYear(){this.year-=1,this._refreshCalendar()}_disablePrevYear(){this.datePickerCalendarNavPreviousYear.setAttribute("disabled","disabled")}_enablePrevYear(){this.datePickerCalendarNavPreviousYear.removeAttribute("disabled")}nextYear(){this.year+=1,this._refreshCalendar()}_disableNextYear(){this.datePickerCalendarNavNextYear.setAttribute("disabled","disabled")}_enableNextYear(){this.datePickerCalendarNavNextYear.removeAttribute("disabled")}show(){this.element.value&&(this.options.startDate=this._parseDate(this.element.value)),this.month=this.options.startDate.getMonth(),this.year=this.options.startDate.getFullYear(),this.day=this.options.startDate.getDate(),this._refreshCalendar(),void 0!==this.options.onOpen&&null!=this.options.onOpen&&this.options.onOpen&&this.options.onOpen(this),this.datePickerContainer.classList.add("is-active"),this.options.overlay||this._adjustPosition(this.options.align),this.open=!0}hide(){this.open=!1,void 0!==this.options.onClose&&null!=this.options.onClose&&this.options.onClose&&this.options.onClose(this),this.datePickerContainer.classList.remove("is-active")}_refreshCalendar(){this.month<0&&(this.year-=Math.ceil(Math.abs(this.month)/12),this.month+=12),this.month>11&&(this.year+=Math.floor(Math.abs(this.month)/12),this.month-=12),this.datePickerCalendarNavMonth.innerHTML=datepicker_langs[this.options.lang].months[this.month],this.datePickerCalendarNavYear.innerHTML=this.year,this.datePickerCalendarNavDay.innerHTML=this.day,this.datePickerCalendarBody.innerHTML="";let minMonth=0,minYear=0,maxMonth=12,maxYear=9999;return this.options.minDate&&(minMonth=this.options.minDate.getMonth(),minYear=this.options.minDate.getFullYear()),this.options.maxDate&&(maxMonth=this.options.maxDate.getMonth(),maxYear=this.options.maxDate.getFullYear()),this.year<=minYear?this._disablePrevYear():this._enablePrevYear(),this.year>=maxYear?this._disableNextYear():this._enableNextYear(),this.year<=minYear&&this.month<=minMonth?this._disablePrevMonth():this._enablePrevMonth(),this.year>=maxYear&&this.month>=maxMonth?this._disableNextMonth():this._enableNextMonth(),this._renderDays(),this}_adjustPosition(align){console.debug("_adjustPosition()");var width=this.datePickerCalendar.offsetWidth,height=this.datePickerCalendar.offsetHeight,viewportWidth=window.innerWidth||document.documentElement.clientWidth,viewportHeight=window.innerHeight||document.documentElement.clientHeight,scrollTop=window.pageYOffset||document.body.scrollTop||document.documentElement.scrollTop,left,top,clientRect;if("function"==typeof this.element.getBoundingClientRect)left=(clientRect=this.element.getBoundingClientRect()).left+window.pageXOffset,top=clientRect.bottom+window.pageYOffset,"right"==align&&(left-=318-clientRect.width),console.debug("left: "+left),console.debug("top: "+top);else for(left=this.element.offsetLeft,top=this.element.offsetTop+this.element.offsetHeight,"right"==align&&(left-=318-clientRect.width),console.debug("left: "+left),console.debug("top: "+top);this.element=this.element.offsetParent;)left+=this.element.offsetLeft,top+=this.element.offsetTop;this.datePickerCalendar.style.position="absolute",this.datePickerCalendar.style.left=left+"px",this.datePickerCalendar.style.top=top+"px"}destroy(){this.datePickerCalendar.remove()}_getFormatedDate(dt,format){var items={d:dt.getDate(),dd:dt.getDate(),D:dt.getDay(),m:dt.getMonth()+1,mm:dt.getMonth()+1,M:dt.getMonth(),MM:dt.getMonth(),yy:dt.getFullYear().toString().substr(-2),yyyy:dt.getFullYear()};return items.dd<10&&(items.dd="0"+items.dd),items.mm<10&&(items.mm="0"+items.mm),items.D=datepicker_langs[this.options.lang].weekdays[items.D?items.D-1:6],items.M=datepicker_langs[this.options.lang].monthsShort[items.M],items.MM=datepicker_langs[this.options.lang].months[items.MM],format.replace(/(?:[dmM]{1,2}|D|yyyy|yy)/g,(function(m){return void 0!==items[m]?items[m]:m}))}_parseDate(dateString,format){const date=new Date;date.setHours(0,0,0,0),format||(format=this.options.dateFormat);const formatPattern=/((?:mm?)|(?:dd?)|(?:yyy?y?))[^0-9]((?:mm?)|(?:dd?)|(?:yyy?y?))[^0-9]((?:mm?)|(?:dd?)|(?:yyy?y?))/i,datePattern=/(\d+)[^0-9](\d+)[^0-9](\d+)/i;let matchFormat=formatPattern.exec(format);if(matchFormat){let matchDate=datePattern.exec(dateString);if(matchDate){switch(matchFormat[1][0]){case"d":date.setDate(matchDate[1]);break;case"m":date.setMonth(matchDate[1]-1);break;case"y":date.setFullYear(matchDate[1])}switch(matchFormat[2][0]){case"d":date.setDate(matchDate[2]);break;case"m":date.setMonth(matchDate[2]-1);break;case"y":date.setFullYear(matchDate[2])}switch(matchFormat[3][0]){case"d":date.setDate(matchDate[3]);break;case"m":date.setMonth(matchDate[3]-1);break;case"y":date.setFullYear(matchDate[3])}}}return date}_isLeapYear(year){return year%4==0&&year%100!=0||year%400==0}_getDaysInMonth(year,month){return[31,this._isLeapYear(year)?29:28,31,30,31,30,31,31,30,31,30,31][month]}_compareDates(a,b){return a.setHours(0,0,0,0),b.setHours(0,0,0,0),a.getTime()===b.getTime()}}return datePicker}));